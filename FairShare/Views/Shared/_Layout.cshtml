@inject Microsoft.Extensions.Configuration.IConfiguration Config
@{
    // Read default from config/env; fallback to "auto"
    string? defaultTheme = (Config["Ui:DefaultTheme"] ?? "auto").ToLowerInvariant();

    // Sanitize any nonsense
    defaultTheme = (defaultTheme == "light" || defaultTheme == "dark") ? defaultTheme : "auto";
}

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>CS-42-S: @ViewData["Title"]</title>

    <!-- Bootstrap 5 CSS (CDN) -->
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
          crossorigin="anonymous" />

    <!-- Apply theme ASAP to prevent FOUC -->
    <script>
        (function () {
          const storageKey = 'fs-theme';
          const defaultTheme = '@defaultTheme'; // light | dark | auto
          const getPreferred = () => {
            const saved = localStorage.getItem(storageKey);
            if (saved === 'light' || saved === 'dark' || saved === 'auto') return saved;
            return defaultTheme;
          };
          const apply = (mode) => {
            const m = (mode === 'light' || mode === 'dark')
              ? mode
              : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            document.documentElement.setAttribute('data-bs-theme', m);
          };
          // initial
          apply(getPreferred());

          // keep in sync if OS theme changes while in 'auto'
          window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
            const saved = localStorage.getItem(storageKey) || defaultTheme;
            if (saved === 'auto') apply('auto');
          });

          // expose helpers for the toggle script later
          window.__fsTheme = { storageKey, apply, getPreferred };
        })();
    </script>

    @RenderSection("Styles", required: false)
</head>
<body>
    <header class="border-bottom mb-4">
        <nav class="navbar navbar-expand-lg bg-body-tertiary border-bottom">
            <div class="container">
                <a class="navbar-brand d-flex align-items-center gap-2" asp-controller="Home" asp-action="Index">‚öñÔ∏è FairShare</a>

                <div class="ms-auto d-flex align-items-center gap-2">
                    <!-- Theme toggle -->
                    <button id="theme-toggle" type="button" class="btn btn-outline-secondary btn-sm" aria-label="Toggle color mode">
                        <span id="theme-toggle-icon" aria-hidden="true">üåô</span>
                    </button>
                </div>
            </div>
        </nav>
    </header>

    <main class="container my-4">
        @RenderBody()
    </main>

    <footer class="container small text-muted py-4">
        &copy; @DateTime.UtcNow.Year - FairShare - Joshua Mykitta - theguywiththedogs.dev
    </footer>

    <!-- Bootstrap 5 bundle (includes Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>

    <script>
        (function () {
          const btn = document.getElementById('theme-toggle');
          const icon = document.getElementById('theme-toggle-icon');
          if (!btn || !icon || !window.__fsTheme) return;

          const { storageKey, apply, getPreferred } = window.__fsTheme;

          const setIcon = () => {
            const mode = document.documentElement.getAttribute('data-bs-theme');
            icon.textContent = (mode === 'dark') ? '‚òÄÔ∏è' : 'üåô';
            btn.setAttribute('title', (mode === 'dark') ? 'Switch to light mode' : 'Switch to dark mode');
          };

          const cycle = () => {
            // light -> dark -> auto -> light...
            const order = ['light', 'dark', 'auto'];
            const current = localStorage.getItem(storageKey) || getPreferred();
            const idx = order.indexOf(current);
            const next = order[(idx + 1) % order.length];
            localStorage.setItem(storageKey, next);
            apply(next);
            setIcon();
          };

          // Initialize icon based on current applied theme
          setIcon();
          btn.addEventListener('click', cycle);
        })();
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
